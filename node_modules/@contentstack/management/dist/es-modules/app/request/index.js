import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../../core/contentstackError';
export function AppRequest(http, data, param) {
  var _this = this;
  http.defaults.versioningStrategy = undefined;
  this.params = param || {};
  if (data) {
    if (data.organization_uid) {
      this.params = {
        organization_uid: data.organization_uid
      };
    }
    /**
      * @description The Delete app request call is used to delete an app request of an app in target_uid.
      * @param {string} requestUID The ID of the request to be deleted
      * @returns Promise<Response>
      * @memberof AppRequest
      * @func delete
      *
      * @example
      * import * as contentstack from '@contentstack/management'
      * const client = contentstack.client({ authtoken: 'TOKEN'})
      *
      * client.organization('organization_uid').request().delete('request_uid`)
      * .then((response) => console.log(response))
      *
        */
    this["delete"] = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestUid) {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context.next = 4;
              return http["delete"]("/requests/".concat(requestUid), headers);
            case 4:
              response = _context.sent;
              if (!response.data) {
                _context.next = 9;
                break;
              }
              return _context.abrupt("return", response.data);
            case 9:
              throw error(response);
            case 10:
              _context.next = 15;
              break;
            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](0);
              throw error(_context.t0);
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 12]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
    /**
      * @description The Create call is used to create a app request for an app.
      * @param {string} appUid The uid for the app for request
      * @param {string} targetUid The uid of the target, on which the app will be installed
      * @returns Promise<Response>
      * @memberof AppRequest
      * @func create
      *
      * @example
      * import * as contentstack from '@contentstack/management'
      * const client = contentstack.client({ authtoken: 'TOKEN'})
      *
      * client.organization('organization_uid').request().create({ appUid: 'app_uid', targetUid: 'target_uid' })
      * .then((response) => console.log(response))
      *
        */
    this.create = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {
        var appUid, targetUid, headers, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              appUid = _ref2.appUid, targetUid = _ref2.targetUid;
              _context2.prev = 1;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context2.next = 5;
              return http.post("/requests", {
                app_uid: appUid,
                target_uid: targetUid
              }, headers);
            case 5:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 10;
                break;
              }
              return _context2.abrupt("return", response.data);
            case 10:
              throw error(response);
            case 11:
              _context2.next = 16;
              break;
            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](1);
              throw error(_context2.t0);
            case 16:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[1, 13]]);
      }));
      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
    /**
      * @description The GET all app requests call is used to retrieve all requests of all apps in an organization.
      * @param {object} param object for query params
      * @returns Promise<Response>
      * @memberof AppRequest
      * @func findAll
      *
      * @example
      * import * as contentstack from '@contentstack/management'
      * const client = contentstack.client({ authtoken: 'TOKEN'})
      *
      * client.organization('organization_uid').request().findAll()
      * .then((response) => console.log(response))
      *
      */
    this.findAll = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var param,
        headers,
        response,
        _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            param = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
            _context3.prev = 1;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params)),
              params: _objectSpread({}, param)
            };
            _context3.next = 5;
            return http.get("/requests", headers);
          case 5:
            response = _context3.sent;
            if (!response.data) {
              _context3.next = 10;
              break;
            }
            return _context3.abrupt("return", response.data);
          case 10:
            throw error(response);
          case 11:
            _context3.next = 16;
            break;
          case 13:
            _context3.prev = 13;
            _context3.t0 = _context3["catch"](1);
            throw error(_context3.t0);
          case 16:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[1, 13]]);
    }));
  }
}