import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../../core/contentstackError';
import { deleteEntity, fetch, fetchAll, update } from '../../entity';
export function Installation(http, data) {
  var _this = this;
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  this.params = params;
  if (data.data) {
    Object.assign(this, cloneDeep(data.data));
    if (this.installation_uid) {
      this.uid = this.installation_uid;
    }
    if (this.organization_uid) {
      this.params = {
        organization_uid: this.organization_uid
      };
    }
    this.urlPath = "/installations/".concat(this.uid);

    /**
     * @description The GET installation call is used to retrieve a specific installation of an app.
     * @memberof Installation
     * @func fetch
     * @returns {Promise<Installation>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').fetch()
     * .then((installation) => console.log(installation))
     *
     */
    this.fetch = fetch(http, 'data', this.params);

    /**
     * @description The Update installation call is used to update information of an installation.
     * @memberof Installation
     * @func update
     * @returns {Promise<Installation>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * const updateInstallation = {
     *  name: 'APP_NAME',
     *  description: 'APP_DESCRIPTION',
     *  target_type: 'stack'/'organization',
     * }
     *
     * const installation = client.organization('organization_uid').app('app_uid').installation('installation_uid')
     * installation = Object.assign(installation, updateInstallation)
     * installation.update()
     * .then((installation) => console.log(installation))
     */
    this.update = update(http, 'data', this.params);

    /**
     * @description The Uninstall installation call is used to uninstall the installation.
     * @memberof Installation
     * @func uninstall
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').uninstall()
     * .then((response) => console.log(response))
     */
    this.uninstall = deleteEntity(http, false, this.params);

    /**
     * @description To fetch organization level app installation configuration.
     * @memberof Installation
     * @func configuration
     * @param {*} param
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').configuration()
     * .then((response) => console.log(response))
     */
    this.configuration = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var param,
        headers,
        response,
        _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            param = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.prev = 1;
            headers = {
              headers: _objectSpread({}, cloneDeep(params)),
              params: _objectSpread({}, cloneDeep(param))
            } || {};
            _context.next = 5;
            return http.get("".concat(_this.urlPath, "/configuration"), headers);
          case 5:
            response = _context.sent;
            if (!response.data) {
              _context.next = 10;
              break;
            }
            return _context.abrupt("return", response.data);
          case 10:
            throw error(response);
          case 11:
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](1);
            throw error(_context.t0);
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[1, 13]]);
    }));
    /**
     * @description To update organization level app installation configuration.
     * @memberof Installation
     * @func setConfiguration
     * @param {*} config Config that needs to be updated
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').setConfiguration({<configuration_details>})
     * .then((response) => console.log(response))
     */
    this.setConfiguration = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(config) {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(params))
              } || {};
              _context2.next = 4;
              return http.put("".concat(_this.urlPath, "/configuration"), config, headers);
            case 4:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 9;
                break;
              }
              return _context2.abrupt("return", response.data);
            case 9:
              throw error(response);
            case 10:
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              throw error(_context2.t0);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 12]]);
      }));
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();

    /**
     * @description To fetch server side organization level config required for the app.
     * @memberof Installation
     * @func getServerConfig
     * @param {*} param
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').serverConfig()
     * .then((response) => console.log(response))
     */
    this.serverConfig = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var param,
        headers,
        response,
        _args3 = arguments;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            param = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
            _context3.prev = 1;
            headers = {
              headers: _objectSpread({}, cloneDeep(params)),
              params: _objectSpread({}, cloneDeep(param))
            } || {};
            _context3.next = 5;
            return http.get("".concat(_this.urlPath, "/server-configuration"), headers);
          case 5:
            response = _context3.sent;
            if (!response.data) {
              _context3.next = 10;
              break;
            }
            return _context3.abrupt("return", response.data);
          case 10:
            throw error(response);
          case 11:
            _context3.next = 16;
            break;
          case 13:
            _context3.prev = 13;
            _context3.t0 = _context3["catch"](1);
            throw error(_context3.t0);
          case 16:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[1, 13]]);
    }));
    /**
     * @description To update server side organization level config required for the app.
     * @memberof Installation
     * @func setServerConfig
     * @param {*} config Config that needs to be updated
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').setServerConfig({<configuration_details>})
     * .then((response) => console.log(response))
     */
    this.setServerConfig = /*#__PURE__*/function () {
      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(config) {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(params))
              } || {};
              _context4.next = 4;
              return http.put("".concat(_this.urlPath, "/server-configuration"), config, headers);
            case 4:
              response = _context4.sent;
              if (!response.data) {
                _context4.next = 9;
                break;
              }
              return _context4.abrupt("return", response.data);
            case 9:
              throw error(response);
            case 10:
              _context4.next = 15;
              break;
            case 12:
              _context4.prev = 12;
              _context4.t0 = _context4["catch"](0);
              throw error(_context4.t0);
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, null, [[0, 12]]);
      }));
      return function (_x2) {
        return _ref4.apply(this, arguments);
      };
    }();

    /**
     * @description To fetch installation data of an app configuration.
     * @memberof Installation
     * @func installationData
     * @returns {Promise<Response>}
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client({ authtoken: 'TOKEN'})
     *
     * client.organization('organization_uid').app('app_uid').installation('installation_uid').installationData()
     * .then((response) => console.log(response))
     */
    this.installationData = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var headers, response;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(params))
            } || {};
            _context5.next = 4;
            return http.get("".concat(_this.urlPath, "/installationData"), headers);
          case 4:
            response = _context5.sent;
            if (!response.data) {
              _context5.next = 9;
              break;
            }
            return _context5.abrupt("return", response.data);
          case 9:
            throw error(response);
          case 10:
            _context5.next = 15;
            break;
          case 12:
            _context5.prev = 12;
            _context5.t0 = _context5["catch"](0);
            throw error(_context5.t0);
          case 15:
          case "end":
            return _context5.stop();
        }
      }, _callee5, null, [[0, 12]]);
    }));
  } else {
    if (data.app_uid) {
      this.urlPath = "manifests/".concat(data.app_uid, "/installations");
      /**
       * @description The find installation call is used to retrieve all installations of your Contentstack organization.
       * @memberof Installation
       * @func findAll
       * @returns {Promise<ContentstackCollection<Installation>>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('app_uid').installation().fetchAll()
       * .then((collection) => console.log(collection))
       *
       */
      this.findAll = fetchAll(http, InstallationCollection, this.params);
    }
  }
  return this;
}
export function InstallationCollection(http, data) {
  var obj = cloneDeep(data.data) || [];
  return obj.map(function (installationData) {
    return new Installation(http, {
      data: installationData
    });
  });
}