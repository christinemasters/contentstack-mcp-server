import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../../core/contentstackError';
import { Deployment } from './deployment';
export function Hosting(http, data, params) {
  var _this = this;
  http.defaults.versioningStrategy = undefined;
  this.params = params || {};
  if (data && data.app_uid) {
    this.urlPath = "/manifests/".concat(data.app_uid, "/hosting");
    if (data.organization_uid) {
      this.params = {
        organization_uid: data.organization_uid
      };
    }

    /**
       * @description The get hosting call is used to fetch to know whether the hosting is enabled or not.
       * @memberof Hosting
       * @func isEnable
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting().isEnable()
       * .then((data) => {})
       */
    this.isEnable = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var headers, response;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params))
            };
            _context.next = 4;
            return http.get(_this.urlPath, headers);
          case 4:
            response = _context.sent;
            if (!response.data) {
              _context.next = 9;
              break;
            }
            return _context.abrupt("return", response.data);
          case 9:
            throw error(response);
          case 10:
            _context.next = 15;
            break;
          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](0);
            throw error(_context.t0);
          case 15:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 12]]);
    }));

    /**
       * @description The toggle hosting call is used to enable the hosting of an app.
       * @memberof Hosting
       * @func enable
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting().enable()
       * .then((data) => {})
       */
    this.enable = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var headers, response;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params))
            };
            _context2.next = 4;
            return http.patch("".concat(_this.urlPath, "/enable"), {}, headers);
          case 4:
            response = _context2.sent;
            if (!response.data) {
              _context2.next = 9;
              break;
            }
            return _context2.abrupt("return", response.data);
          case 9:
            throw error(response);
          case 10:
            _context2.next = 15;
            break;
          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2["catch"](0);
            throw error(_context2.t0);
          case 15:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[0, 12]]);
    }));

    /**
       * @description The toggle hosting call is used to disable the hosting of an app.
       * @memberof Hosting
       * @func disable
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting().disable()
       * .then((data) => {})
       */
    this.disable = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      var headers, response;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params))
            };
            _context3.next = 4;
            return http.patch("".concat(_this.urlPath, "/disable"), {}, headers);
          case 4:
            response = _context3.sent;
            if (!response.data) {
              _context3.next = 9;
              break;
            }
            return _context3.abrupt("return", response.data);
          case 9:
            throw error(response);
          case 10:
            _context3.next = 15;
            break;
          case 12:
            _context3.prev = 12;
            _context3.t0 = _context3["catch"](0);
            throw error(_context3.t0);
          case 15:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[0, 12]]);
    }));

    /**
       * @descriptionThe create signed upload url call is used to create an signed upload url for the files in hosting.
       * @memberof Hosting
       * @func createUploadUrl
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting().createUploadUrl()
       * .then((data) => {})
       */
    this.createUploadUrl = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
      var headers, response;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params))
            };
            _context4.next = 4;
            return http.post("".concat(_this.urlPath, "/signedUploadUrl"), {}, headers);
          case 4:
            response = _context4.sent;
            if (!response.data) {
              _context4.next = 9;
              break;
            }
            return _context4.abrupt("return", response.data);
          case 9:
            throw error(response);
          case 10:
            _context4.next = 15;
            break;
          case 12:
            _context4.prev = 12;
            _context4.t0 = _context4["catch"](0);
            throw error(_context4.t0);
          case 15:
          case "end":
            return _context4.stop();
        }
      }, _callee4, null, [[0, 12]]);
    }));

    /**
         * @descriptionThe The GET latest live deployment call is used to get details of latest deployment of the source file.
         * @memberof Hosting
         * @func latestLiveDeployment
         * @returns {Promise<Deployment>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().latestLiveDeployment()
         * .then((data) => {})
         */
    this.latestLiveDeployment = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
      var headers, response, content;
      return _regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            headers = {
              headers: _objectSpread({}, cloneDeep(_this.params))
            };
            _context5.next = 4;
            return http.get("".concat(_this.urlPath, "/latestLiveDeployment"), headers);
          case 4:
            response = _context5.sent;
            if (!response.data) {
              _context5.next = 10;
              break;
            }
            content = response.data.data;
            return _context5.abrupt("return", new Deployment(http, {
              data: content,
              app_uid: data.app_uid
            }, _this.params));
          case 10:
            throw error(response);
          case 11:
            _context5.next = 16;
            break;
          case 13:
            _context5.prev = 13;
            _context5.t0 = _context5["catch"](0);
            throw error(_context5.t0);
          case 16:
          case "end":
            return _context5.stop();
        }
      }, _callee5, null, [[0, 13]]);
    }));

    /**
       * @description Create instance of Hosting deployment.
       * @memberof Hosting
       * @func deployment
       * @returns {Deployment}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting().deployment()
       *
       */
    this.deployment = function () {
      var uid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var content = {
        app_uid: data.app_uid
      };
      if (uid) {
        content.data = {
          uid: uid
        };
      }
      return new Deployment(http, content, _this.params);
    };
  }
}