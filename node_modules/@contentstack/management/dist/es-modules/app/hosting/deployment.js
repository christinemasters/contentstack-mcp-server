import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import ContentstackCollection from '../../contentstackCollection';
import error from '../../core/contentstackError';
export function Deployment(http, data, params) {
  var _this = this;
  http.defaults.versioningStrategy = undefined;
  if (data && data.app_uid) {
    this.params = params || {};
    this.urlPath = "/manifests/".concat(data.app_uid, "/hosting/deployments");
    if (data.organization_uid) {
      this.params = {
        organization_uid: data.organization_uid
      };
    }
    if (data.data) {
      Object.assign(this, cloneDeep(data.data));
      if (this.organization_uid) {
        this.params = {
          organization_uid: this.organization_uid
        };
      }
    }
    if (this.uid) {
      this.urlPath = "/manifests/".concat(data.app_uid, "/hosting/deployments/").concat(this.uid);
      /**
         * @descriptionThe The GET deployment call is used to get all the details of an deployment of an app
         * @memberof Deployment
         * @func fetch
         * @returns {Promise<Deployment>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().deployment('deployment_uid').fetch()
         * .then((data) => {})
         */
      this.fetch = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var headers, response, content;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context.next = 4;
              return http.get("".concat(_this.urlPath), headers);
            case 4:
              response = _context.sent;
              if (!response.data) {
                _context.next = 10;
                break;
              }
              content = response.data.data;
              return _context.abrupt("return", new Deployment(http, {
                data: content,
                app_uid: data.app_uid
              }, _this.params));
            case 10:
              throw error(response);
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](0);
              throw error(_context.t0);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[0, 13]]);
      }));

      /**
         * @descriptionThe The list deployment logs call is used to list logs of a deployment.
         * @memberof Deployment
         * @func logs
         * @returns {Promise<Response>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().deployment('deployment_uid').logs()
         * .then((data) => {})
         */
      this.logs = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context2.next = 4;
              return http.get("".concat(_this.urlPath, "/logs"), headers);
            case 4:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 9;
                break;
              }
              return _context2.abrupt("return", response.data.data);
            case 9:
              throw error(response);
            case 10:
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              throw error(_context2.t0);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 12]]);
      }));

      /**
         * @descriptionThe The create signed download url call is used to get the download url of the deployment source code.
         * @memberof signedDownloadUrl
         * @func logs
         * @returns {Promise<Response>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().deployment('deployment_uid').signedDownloadUrl()
         * .then((data) => {})
         */
      this.signedDownloadUrl = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context3.next = 4;
              return http.post("".concat(_this.urlPath, "/signedDownloadUrl"), {}, headers);
            case 4:
              response = _context3.sent;
              if (!response.data) {
                _context3.next = 9;
                break;
              }
              return _context3.abrupt("return", response.data.data);
            case 9:
              throw error(response);
            case 10:
              _context3.next = 15;
              break;
            case 12:
              _context3.prev = 12;
              _context3.t0 = _context3["catch"](0);
              throw error(_context3.t0);
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3, null, [[0, 12]]);
      }));
    } else {
      /**
         * @descriptionThe The create hosting deployments call is used to deploy the uploaded file in hosting
         * @memberof Deployment
         * @func create
         * @returns {Promise<Deployment>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().deployment().create()
         * .then((data) => {})
         */
      this.create = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4) {
          var uploadUid, fileType, withAdvancedOptions, headers, response, content;
          return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                uploadUid = _ref4.uploadUid, fileType = _ref4.fileType, withAdvancedOptions = _ref4.withAdvancedOptions;
                _context4.prev = 1;
                headers = {
                  headers: _objectSpread({}, cloneDeep(_this.params))
                };
                if (withAdvancedOptions) {
                  headers.params = {
                    with_advanced_options: withAdvancedOptions
                  };
                }
                _context4.next = 6;
                return http.post("".concat(_this.urlPath), {
                  upload_uid: uploadUid,
                  file_type: fileType
                }, headers);
              case 6:
                response = _context4.sent;
                if (!response.data) {
                  _context4.next = 12;
                  break;
                }
                content = response.data.data;
                return _context4.abrupt("return", new Deployment(http, {
                  data: content,
                  app_uid: data.app_uid
                }, _this.params));
              case 12:
                throw error(response);
              case 13:
                _context4.next = 18;
                break;
              case 15:
                _context4.prev = 15;
                _context4.t0 = _context4["catch"](1);
                throw error(_context4.t0);
              case 18:
              case "end":
                return _context4.stop();
            }
          }, _callee4, null, [[1, 15]]);
        }));
        return function (_x) {
          return _ref5.apply(this, arguments);
        };
      }();

      /**
         * @descriptionThe The list deployments call is used to get all the available deployments made for an app.
         * @memberof Deployment
         * @func findAll
         * @returns {Promise<ContentstackCollection>}
         *
         * @example
         * import * as contentstack from '@contentstack/management'
         * const client = contentstack.client({ authtoken: 'TOKEN'})
         * client.organization('organization_uid').app('manifest_uid').hosting().deployment().create()
         * .then((data) => {})
         */
      this.findAll = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var param,
          headers,
          response,
          content,
          collection,
          _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              param = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
              _context5.prev = 1;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params)),
                params: _objectSpread({}, cloneDeep(param))
              };
              _context5.next = 5;
              return http.get("".concat(_this.urlPath), headers);
            case 5:
              response = _context5.sent;
              if (!response.data) {
                _context5.next = 13;
                break;
              }
              content = response.data;
              collection = new ContentstackCollection(response, http);
              collection.items = DeploymentCollection(http, content, data.app_uid, _this.params);
              return _context5.abrupt("return", collection);
            case 13:
              throw error(response);
            case 14:
              _context5.next = 19;
              break;
            case 16:
              _context5.prev = 16;
              _context5.t0 = _context5["catch"](1);
              throw error(_context5.t0);
            case 19:
            case "end":
              return _context5.stop();
          }
        }, _callee5, null, [[1, 16]]);
      }));
    }
  }
}
export function DeploymentCollection(http, data, appUid, param) {
  var obj = cloneDeep(data.data) || [];
  return obj.map(function (content) {
    return new Deployment(http, {
      data: content,
      app_uid: appUid
    }, param);
  });
}