import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../core/contentstackError';
import { create, deleteEntity, fetch, fetchAll, update } from '../entity';
import { Authorization } from './authorization';
import { Hosting } from './hosting';
import { Installation, InstallationCollection } from './installation';
import ContentstackCollection from '../contentstackCollection';
export function App(http, data) {
  var _this = this;
  http.defaults.versioningStrategy = undefined;
  this.urlPath = '/manifests';
  this.params = {};
  if (data) {
    if (data.organization_uid) {
      this.params = {
        organization_uid: data.organization_uid
      };
    }
    if (data.data) {
      Object.assign(this, cloneDeep(data.data));
      if (this.organization_uid) {
        this.params = {
          organization_uid: this.organization_uid
        };
      }
      this.urlPath = "/manifests/".concat(this.uid);

      /**
       * @description The update manifest call is used to update the app details such as name, description, icon, and so on.
       * @memberof App
       * @func update
       * @returns {Promise<App>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * const updateApp = {
       *  name: 'APP_NAME',
       *  description: 'APP_DESCRIPTION',
       *  target_type: 'stack'/'organization',
       * }
       * const app = client.organization('organization_uid').app('manifest_uid')
       * app = Object.assign(app, updateApp)
       * app.update()
       * .then((app) => console.log(app))
       *
       */
      this.update = update(http, undefined, this.params);

      /**
       * @description  The get manifest call is used to fetch details of a particular app with its ID.
       * @memberof App
       * @func fetch
       * @returns {Promise<App>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').fetch()
       * .then((app) => console.log(app))
       *
       */
      this.fetch = fetch(http, 'data', this.params);

      /**
       * @description The delete manifest call is used to delete the app.
       * @memberof App
       * @func delete
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').delete()
       * .then((response) => console.log(response))
       */
      this["delete"] = deleteEntity(http, false, this.params);

      /**
       * @description The get oauth call is used to fetch the OAuth details of the app.
       * @memberof App
       * @func fetchOAuth
       * @returns {Promise<AppOAuth>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').fetchOAuth()
       * .then((oAuthConfig) => console.log(oAuthConfig))
       */
      this.fetchOAuth = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var param,
          headers,
          response,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              param = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              _context.prev = 1;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params)),
                params: _objectSpread({}, cloneDeep(param))
              } || {};
              _context.next = 5;
              return http.get("".concat(_this.urlPath, "/oauth"), headers);
            case 5:
              response = _context.sent;
              if (!response.data) {
                _context.next = 10;
                break;
              }
              return _context.abrupt("return", response.data.data || {});
            case 10:
              throw error(response);
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](1);
              throw error(_context.t0);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[1, 13]]);
      }));

      /**
       * @description The change oauth details call is used to update the OAuth details, (redirect url and permission scope) of an app.
       * @memberof App
       * @func updateOAuth
       * @returns {Promise<AppOAuth>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * const config = {
       *  redirect_uri: 'REDIRECT_URI',
       *  app_token_config: {
       *    enabled: true,
       *    scopes: ['scope1', 'scope2']
       *   },
       *   user_token_config: {
       *    enabled: true,
       *    scopes: ['scope1', 'scope2']
       *   }
       *  }
       * client.organization('organization_uid').app('manifest_uid').updateOAuth({ config })
       * .then((oAuthConfig) => console.log(oAuthConfig))
       */
      this.updateOAuth = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {
          var config, _ref2$param, param, headers, response;
          return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                config = _ref2.config, _ref2$param = _ref2.param, param = _ref2$param === void 0 ? {} : _ref2$param;
                _context2.prev = 1;
                headers = {
                  headers: _objectSpread({}, cloneDeep(_this.params)),
                  params: _objectSpread({}, cloneDeep(param))
                } || {};
                _context2.next = 5;
                return http.put("".concat(_this.urlPath, "/oauth"), config, headers);
              case 5:
                response = _context2.sent;
                if (!response.data) {
                  _context2.next = 10;
                  break;
                }
                return _context2.abrupt("return", response.data.data || {});
              case 10:
                throw error(response);
              case 11:
                _context2.next = 16;
                break;
              case 13:
                _context2.prev = 13;
                _context2.t0 = _context2["catch"](1);
                throw error(_context2.t0);
              case 16:
              case "end":
                return _context2.stop();
            }
          }, _callee2, null, [[1, 13]]);
        }));
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }();

      /**
       * @description The hosting will allow you get, update, deploy manifest.
       * @memberof App
       * @func updateOAuth
       * @returns {Promise<AppOAuth>}
       * @returns {Hosting}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').hosting()
       */
      this.hosting = function () {
        return new Hosting(http, {
          app_uid: _this.uid
        }, _this.params);
      };

      /**
       * @description The install call is used to initiate the installation of the app
       * @memberof App
       * @func install
       * @param {String} param.targetType - The target on which app needs to be installed, stack or ogranization.
       * @param {String} param.targetUid - The uid of the target, on which the app will be installed
       * @returns Promise<Installation>
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').install({ targetUid: 'STACK_API_KEY', targetType: 'stack' })
       * .then((installation) => console.log(installation))
       */
      this.install = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4) {
          var targetUid, targetType, headers, response;
          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                targetUid = _ref4.targetUid, targetType = _ref4.targetType;
                _context3.prev = 1;
                headers = {
                  headers: _objectSpread({}, cloneDeep(_this.params))
                } || {};
                _context3.next = 5;
                return http.post("".concat(_this.urlPath, "/install"), {
                  target_type: targetType,
                  target_uid: targetUid
                }, headers);
              case 5:
                response = _context3.sent;
                if (!response.data) {
                  _context3.next = 10;
                  break;
                }
                return _context3.abrupt("return", new Installation(http, response.data, _this.params) || {});
              case 10:
                throw error(response);
              case 11:
                _context3.next = 16;
                break;
              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3["catch"](1);
                throw error(_context3.t0);
              case 16:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[1, 13]]);
        }));
        return function (_x2) {
          return _ref5.apply(this, arguments);
        };
      }();

      /**
       * @description The Installation will allow you to fetch, update and delete of the app installation.
       * @memberof App
       * @func installation
       * @param {String} uid Installation uid
       * @returns Installation
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').installation().findAll()
       * .then((installations) => console.log(installations))
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').installation('installation_uid').fetch()
       * .then((installation) => console.log(installation))
       */
      this.installation = function () {
        var uid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return new Installation(http, uid ? {
          data: {
            uid: uid
          }
        } : {
          app_uid: _this.uid
        }, _this.params);
      };
      /**
        * @description  The GET app requests of an app call is used to retrieve all requests of an app.
        * @returns Promise<Response>
        * @memberof App
        * @func getRequests
        *
        * @example
        * import * as contentstack from '@contentstack/management'
        * const client = contentstack.client({ authtoken: 'TOKEN'})
        *
        * client.organization('organization_uid').app('app_uid').getRequests()
        * .then((response) => console.log(response))
        *
         */
      this.getRequests = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context4.next = 4;
              return http.get("".concat(_this.urlPath, "/requests"), headers);
            case 4:
              response = _context4.sent;
              if (!response.data) {
                _context4.next = 9;
                break;
              }
              return _context4.abrupt("return", response.data);
            case 9:
              throw error(response);
            case 10:
              _context4.next = 15;
              break;
            case 12:
              _context4.prev = 12;
              _context4.t0 = _context4["catch"](0);
              throw error(_context4.t0);
            case 15:
            case "end":
              return _context4.stop();
          }
        }, _callee4, null, [[0, 12]]);
      }));
      /**
        * @description  The App authorization allow to authorize app for specific scope.
        * @returns Promise<Response>
        * @param {string} param.responseType Desired grant type
        * @param {string} param.clientId Client id of the app
        * @param {string} param.redirectUri Redirect URL of the app
        * @param {string} param.scope Scopes of the app
        * @param {string} param.state Local state provided by the client
        *
        * @memberof App
        * @func authorize
        *
        * @example
        * import * as contentstack from '@contentstack/management'
        * const client = contentstack.client({ authtoken: 'TOKEN'})
        *
        * client.organization('organization_uid').app('app_uid').authorize()
        * .then((response) => console.log(response))
        *
         */
      this.authorize = /*#__PURE__*/function () {
        var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref7) {
          var responseType, clientId, redirectUri, scope, state, headers, content, response;
          return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                responseType = _ref7.responseType, clientId = _ref7.clientId, redirectUri = _ref7.redirectUri, scope = _ref7.scope, state = _ref7.state;
                _context5.prev = 1;
                headers = {
                  headers: _objectSpread({}, cloneDeep(_this.params))
                };
                content = {
                  response_type: responseType,
                  client_id: clientId,
                  redirect_uri: redirectUri,
                  scope: scope
                };
                if (state) {
                  content.state = state;
                }
                _context5.next = 7;
                return http.post("".concat(_this.urlPath, "/authorize"), content, headers);
              case 7:
                response = _context5.sent;
                if (!response.data) {
                  _context5.next = 12;
                  break;
                }
                return _context5.abrupt("return", response.data);
              case 12:
                throw error(response);
              case 13:
                _context5.next = 18;
                break;
              case 15:
                _context5.prev = 15;
                _context5.t0 = _context5["catch"](1);
                throw error(_context5.t0);
              case 18:
              case "end":
                return _context5.stop();
            }
          }, _callee5, null, [[1, 15]]);
        }));
        return function (_x3) {
          return _ref8.apply(this, arguments);
        };
      }();
      /**
       * @description The Authorization will allow you to get all authorization, revoke specific or all authorization
       * @memberof App
       * @func authorization
       * @returns {Authorization}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * client.organization('organization_uid').app('manifest_uid').authorization()
       */
      this.authorization = function () {
        return new Authorization(http, {
          app_uid: _this.uid
        }, _this.params);
      };

      /**
       * @description The list installation call is used to retrieve all installations of your Contentstack organization.
       * @memberof App
       * @func listInstallations
       * @returns {Promise<ContentstackCollection<Installation>>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('app_uid').listInstallations()
       * .then((collection) => console.log(collection))
       *
       */
      this.listInstallations = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              headers = {
                headers: _objectSpread(_objectSpread({}, cloneDeep(_this.params)), cloneDeep(_this.headers))
              };
              _context6.next = 4;
              return http.get("manifests/".concat(_this.uid, "/installations"), headers);
            case 4:
              response = _context6.sent;
              if (!response.data) {
                _context6.next = 9;
                break;
              }
              return _context6.abrupt("return", new ContentstackCollection(response, http, _this.stackHeaders, InstallationCollection));
            case 9:
              throw error(response);
            case 10:
              _context6.next = 15;
              break;
            case 12:
              _context6.prev = 12;
              _context6.t0 = _context6["catch"](0);
              throw error(_context6.t0);
            case 15:
            case "end":
              return _context6.stop();
          }
        }, _callee6, null, [[0, 12]]);
      }));
    } else {
      /**
       * @description The create manifest call is used for creating a new app/manifest in your Contentstack organization.
       * @memberof App
       * @func create
       * @returns {Promise<App>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       * const app = {
       *  name: 'APP_NAME',
       *  description: 'APP_DESCRIPTION',
       *  target_type: 'stack'/'organization',
       *  webhook: // optional
       *   {
       *     target_url: 'TARGET_URL',
       *     channel: 'CHANNEL'
       *   },
       *  oauth: // optional
       *   {
       *     redirect_uri: 'REDIRECT_URI',
       *     enabled: true,
       *   }
       * }
       *
       * client.organization('organization_uid').app().create(app)
       * .then((app) => console.log(app))
       *
       */
      this.create = create({
        http: http,
        params: this.params
      });

      /**
       * @description The get all manifest call is used to fetch all the apps in your Contentstack organization.
       * @memberof App
       * @func findAll
       * @returns {Promise<ContentstackCollection<App>>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app().fetchAll()
       * .then((collection) => console.log(collection))
       *
       */
      this.findAll = fetchAll(http, AppCollection, this.params);

      /**
       * @description To get the apps list of authorized apps for the particular organization
       * @memberof Organization
       * @func authorizedApps
       * @param {number} skip - Offset for skipping content in the response.
       * @param {number} limit - Limit on api response to provide content in list.
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client()
       *
       * client.organization('organization_uid').authorizedApps({ skip: 10 })
       * .then((roles) => console.log(roles))
       *
       */
      this.findAllAuthorized = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var param,
          headers,
          response,
          _args7 = arguments;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              param = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              headers.params = _objectSpread({}, param);
              _context7.prev = 3;
              _context7.next = 6;
              return http.get("/authorized-apps", headers);
            case 6:
              response = _context7.sent;
              if (!response.data) {
                _context7.next = 11;
                break;
              }
              return _context7.abrupt("return", response.data);
            case 11:
              return _context7.abrupt("return", error(response));
            case 12:
              _context7.next = 17;
              break;
            case 14:
              _context7.prev = 14;
              _context7.t0 = _context7["catch"](3);
              return _context7.abrupt("return", error(_context7.t0));
            case 17:
            case "end":
              return _context7.stop();
          }
        }, _callee7, null, [[3, 14]]);
      }));
    }
  }
  return this;
}
export function AppCollection(http, data) {
  var obj = cloneDeep(data.data) || [];
  return obj.map(function (appData) {
    return new App(http, {
      data: appData
    });
  });
}